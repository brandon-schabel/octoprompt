version: '3.8'

services:
  promptliano:
    build:
      context: .
      dockerfile: Dockerfile.production
      args:
        BUN_VERSION: 1
    image: promptliano:production
    container_name: promptliano-server
    restart: unless-stopped
    
    ports:
      - "3147:3147"
    
    volumes:
      # Persistent data storage (managed by Docker)
      - promptliano-data:/data:rw
      
      # Configuration files (read-only)
      - ./config:/config:ro
      
      # Optional: Mount projects directory for file access
      # - ~/Projects:/projects:ro
    
    environment:
      - NODE_ENV=production
      - SERVER_PORT=3147
      - DATABASE_PATH=/data/promptliano.db
      - PROMPTLIANO_DATA_DIR=/data
      
      # CORS configuration
      - CORS_ORIGIN=${CORS_ORIGIN:-http://localhost:3147}
      
      # Rate limiting
      - RATE_LIMIT_ENABLED=${RATE_LIMIT_ENABLED:-true}
      
      # Logging
      - LOG_LEVEL=${LOG_LEVEL:-info}
    
    # Use Docker secrets for sensitive data
    secrets:
      - openai_api_key
      - anthropic_api_key
      - jwt_secret
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3147/api/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s
    
    networks:
      - promptliano-network
    
    # Resource limits for production
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
      
      # Rolling update configuration
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
        failure_action: rollback
      
      # Restart policy
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # Optional: PostgreSQL database for production
  postgres:
    image: postgres:16-alpine
    container_name: promptliano-db
    restart: unless-stopped
    
    environment:
      - POSTGRES_DB=promptliano
      - POSTGRES_USER=promptliano
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
    
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
    
    secrets:
      - db_password
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U promptliano"]
      interval: 10s
      timeout: 5s
      retries: 5
    
    networks:
      - promptliano-network

  # Optional: Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: promptliano-cache
    restart: unless-stopped
    
    command: redis-server --appendonly yes --requirepass /run/secrets/redis_password
    
    volumes:
      - redis-data:/data
    
    secrets:
      - redis_password
    
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    
    networks:
      - promptliano-network

  # Optional: Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: promptliano-proxy
    restart: unless-stopped
    
    ports:
      - "80:80"
      - "443:443"
    
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx-cache:/var/cache/nginx
    
    depends_on:
      promptliano:
        condition: service_healthy
    
    networks:
      - promptliano-network

volumes:
  promptliano-data:
    driver: local
  postgres-data:
    driver: local
  redis-data:
    driver: local
  nginx-cache:
    driver: local

networks:
  promptliano-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Define secrets (external means they're created outside compose)
secrets:
  openai_api_key:
    external: true
  anthropic_api_key:
    external: true
  jwt_secret:
    external: true
  db_password:
    external: true
  redis_password:
    external: true